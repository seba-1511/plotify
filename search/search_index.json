{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Example \u00b6 Output \u00b6 Code \u00b6 import plotify as pl import numpy as np # create plot object plot = pl . ModernPlot ( width = 7500.0 ) # title plot . set_title ( 'Modern Plot Title' ) plot . set_subtitle ( r 'Subtitle: $y = f(x)$' ) # settings plot . set_palette ( 'vibrant' ) plot . set_axis ( x = r 'Argument $x$' , y = r 'Values $f(x) / 1,000$' ) plot . set_notation ( x = 'scientific' , y = 'decimal' ) plot . set_scales ( x = 'linear' , y = 'log2' ) plot . set_grid ( 'horizontal' , granularity = 'coarse' ) plot . set_legend ( title = 'Curve Family' ) # plot data num_points = 10 xs = np . arange ( 1 , 1 + num_points ) plot . plot ( x = xs , y = xs / 1000 , label = r 'Linear' , linestyle = 'dashed' , ) plot . plot ( x = xs , y = xs ** 2 / 1000 , label = 'Quadratic' , linestyle = 'dotted' , ) plot . plot ( x = xs , y = xs ** 3 / 1000 , label = 'Cubic' , marker = False , ) plot . plot ( x = xs , y = np . exp ( xs ) / 1000 , label = 'Exponential' , marker = pl . markers . square ( size = 'large' ), linestyle = '-.' , ) plot . save ( 'docs/assets/images/examples/modern_plot.png' , bbox_inches = 'tight' ) Install \u00b6 pip install plotify Resources \u00b6 GitHub: github.com/seba-1511/plotify Documentation: sebarnold.net/plotify Contact: sebarnold.net","title":"Home"},{"location":"#example","text":"","title":"Example"},{"location":"#output","text":"","title":"Output"},{"location":"#code","text":"import plotify as pl import numpy as np # create plot object plot = pl . ModernPlot ( width = 7500.0 ) # title plot . set_title ( 'Modern Plot Title' ) plot . set_subtitle ( r 'Subtitle: $y = f(x)$' ) # settings plot . set_palette ( 'vibrant' ) plot . set_axis ( x = r 'Argument $x$' , y = r 'Values $f(x) / 1,000$' ) plot . set_notation ( x = 'scientific' , y = 'decimal' ) plot . set_scales ( x = 'linear' , y = 'log2' ) plot . set_grid ( 'horizontal' , granularity = 'coarse' ) plot . set_legend ( title = 'Curve Family' ) # plot data num_points = 10 xs = np . arange ( 1 , 1 + num_points ) plot . plot ( x = xs , y = xs / 1000 , label = r 'Linear' , linestyle = 'dashed' , ) plot . plot ( x = xs , y = xs ** 2 / 1000 , label = 'Quadratic' , linestyle = 'dotted' , ) plot . plot ( x = xs , y = xs ** 3 / 1000 , label = 'Cubic' , marker = False , ) plot . plot ( x = xs , y = np . exp ( xs ) / 1000 , label = 'Exponential' , marker = pl . markers . square ( size = 'large' ), linestyle = '-.' , ) plot . save ( 'docs/assets/images/examples/modern_plot.png' , bbox_inches = 'tight' )","title":"Code"},{"location":"#install","text":"pip install plotify","title":"Install"},{"location":"#resources","text":"GitHub: github.com/seba-1511/plotify Documentation: sebarnold.net/plotify Contact: sebarnold.net","title":"Resources"},{"location":"changelog/","text":"Changelog \u00b6 All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [Unreleased] \u00b6 Added \u00b6 Changed \u00b6 Fixed \u00b6","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"[Unreleased]"},{"location":"changelog/#added","text":"","title":"Added"},{"location":"changelog/#changed","text":"","title":"Changed"},{"location":"changelog/#fixed","text":"","title":"Fixed"},{"location":"api/","text":"plotify \u00b6","title":"plotify"},{"location":"api/#plotify","text":"","title":"plotify"},{"location":"api/colors/","text":"Colors \u00b6 Plotify provides 2 color palettes: plotify . colors . Maureen \u00b6 plotify . colors . Vibrant \u00b6 Utilities \u00b6 plotify . colors . lighten_color ( color , amount = 0.5 ) \u00b6 Description \u00b6 Lightens a color by a given amount. Lightens the given color by multiplying (1-luminosity) by the given amount. Input can be matplotlib color string, hex string, or RGB tuple. The higher the amount, the lighter the color. References \u00b6 Taken from: StackOverflow Example \u00b6 lighten_color ( 'g' , 0.3 ) lighten_color ( '#F034A3' , 0.6 ) lighten_color (( .3 , .55 , .1 ), 0.5 )","title":"Colors"},{"location":"api/colors/#colors","text":"Plotify provides 2 color palettes:","title":"Colors"},{"location":"api/colors/#plotify.colors.Maureen","text":"","title":"Maureen"},{"location":"api/colors/#plotify.colors.Vibrant","text":"","title":"Vibrant"},{"location":"api/colors/#utilities","text":"","title":"Utilities"},{"location":"api/colors/#plotify.colors.lighten_color","text":"","title":"lighten_color()"},{"location":"api/fonts/","text":"Fonts \u00b6 Plotify provides utlities to add custom fonts to Matplotlib. plotify . fonts . add_font ( path ) \u00b6 Description \u00b6 Adds a font file to Matplotlib. Arguments \u00b6 path : Path to the ttf / otf file. Example \u00b6 plotify . fonts . add_font ( 'my_file.ttf' ) plotify . fonts . add_ttf_directory ( dir_path ) \u00b6 Description \u00b6 Adds all ttf files in a directory Arguments \u00b6 dir_path : Path to the ttf / otf directory. Example \u00b6 plotify . fonts . add_ttf_directory ( 'my_file.ttf' )","title":"Fonts"},{"location":"api/fonts/#fonts","text":"Plotify provides utlities to add custom fonts to Matplotlib.","title":"Fonts"},{"location":"api/fonts/#plotify.fonts.add_font","text":"","title":"add_font()"},{"location":"api/fonts/#plotify.fonts.add_ttf_directory","text":"","title":"add_ttf_directory()"},{"location":"api/markers/","text":"Markers \u00b6 Plotify provides a generic way to define markers and some of their properties: plotify.markers.Marker \u00b6 __call__ ( self , ** kwargs ) \u00b6 Call self as a function. __init__ ( self , symbol = 'o' , fill = True , size = 8.5 ) \u00b6 Initialize self. See help(type(self)) for accurate signature. From which a set of preconfigured markers is defined: plotify . markers . circle \u00b6 plotify . markers . cross \u00b6 plotify . markers . diamond \u00b6 plotify . markers . pentagone \u00b6 plotify . markers . square \u00b6 plotify . markers . star \u00b6 plotify . markers . triangle_up \u00b6 plotify . markers . triangle_down \u00b6 plotify . markers . triangle_left \u00b6 plotify . markers . triangle_right \u00b6","title":"Markers"},{"location":"api/markers/#markers","text":"Plotify provides a generic way to define markers and some of their properties:","title":"Markers"},{"location":"api/markers/#plotify.markers.Marker","text":"","title":"Marker"},{"location":"api/markers/#plotify.markers.Marker.__call__","text":"Call self as a function.","title":"__call__()"},{"location":"api/markers/#plotify.markers.Marker.__init__","text":"Initialize self. See help(type(self)) for accurate signature. From which a set of preconfigured markers is defined:","title":"__init__()"},{"location":"api/markers/#plotify.markers.circle","text":"","title":"circle"},{"location":"api/markers/#plotify.markers.cross","text":"","title":"cross"},{"location":"api/markers/#plotify.markers.diamond","text":"","title":"diamond"},{"location":"api/markers/#plotify.markers.pentagone","text":"","title":"pentagone"},{"location":"api/markers/#plotify.markers.square","text":"","title":"square"},{"location":"api/markers/#plotify.markers.star","text":"","title":"star"},{"location":"api/markers/#plotify.markers.triangle_up","text":"","title":"triangle_up"},{"location":"api/markers/#plotify.markers.triangle_down","text":"","title":"triangle_down"},{"location":"api/markers/#plotify.markers.triangle_left","text":"","title":"triangle_left"},{"location":"api/markers/#plotify.markers.triangle_right","text":"","title":"triangle_right"},{"location":"api/more_plots/","text":"Plot Subclasses \u00b6 The following are subclasses from BasePlot and follow the same API (they just have different default). Predefined 2D Plots \u00b6 plotify.custom_plots.Plot ( PublicationPlot ) \u00b6 __init__ ( self , * args , * , width = 7500.0 , ** kwargs ) \u00b6 Description \u00b6 Creates a Plot object. Arguments \u00b6 title : The title of the plot. See set_title . height : The height of the plot. width : The width of the plot. dpi : The resolution of the plot. plot3d : Whether the plot is a 3D plot or not. border : Whether to draw a thin black border around the frame of the plot. Example \u00b6 plot = pl . Plot ( 'Title' ) plotify.custom_plots.PublicationPlot ( BasePlot ) \u00b6 __init__ ( self , title = '' , height = 2600.0 , width = 2600.0 , dpi = 530.0 , * args , ** kwargs ) \u00b6 Description \u00b6 Creates a Plot object. Arguments \u00b6 title : The title of the plot. See set_title . height : The height of the plot. width : The width of the plot. dpi : The resolution of the plot. plot3d : Whether the plot is a 3D plot or not. border : Whether to draw a thin black border around the frame of the plot. Example \u00b6 plot = pl . Plot ( 'Title' ) plotify.custom_plots.LowResPlot ( BasePlot ) \u00b6 __init__ ( self , title = '' , height = 975.0 , width = 1800.0 , dpi = 210.0 , * args , ** kwargs ) \u00b6 Description \u00b6 Creates a Plot object. Arguments \u00b6 title : The title of the plot. See set_title . height : The height of the plot. width : The width of the plot. dpi : The resolution of the plot. plot3d : Whether the plot is a 3D plot or not. border : Whether to draw a thin black border around the frame of the plot. Example \u00b6 plot = pl . Plot ( 'Title' ) plotify.custom_plots.ModernPlot ( PublicationPlot ) \u00b6 __init__ ( self , * args , ** kwargs ) \u00b6 Description \u00b6 Creates a Plot object. Arguments \u00b6 title : The title of the plot. See set_title . height : The height of the plot. width : The width of the plot. dpi : The resolution of the plot. plot3d : Whether the plot is a 3D plot or not. border : Whether to draw a thin black border around the frame of the plot. Example \u00b6 plot = pl . Plot ( 'Title' ) plotify.plot.Image ( Drawing ) \u00b6 __init__ ( self , path , * args , ** kwargs ) \u00b6 Description \u00b6 Creates a Plot object. Arguments \u00b6 title : The title of the plot. See set_title . height : The height of the plot. width : The width of the plot. dpi : The resolution of the plot. plot3d : Whether the plot is a 3D plot or not. border : Whether to draw a thin black border around the frame of the plot. Example \u00b6 plot = pl . Plot ( 'Title' ) plotify.plot.Drawing ( BasePlot ) \u00b6 __init__ ( self , * args , ** kwargs ) \u00b6 Description \u00b6 Creates a Plot object. Arguments \u00b6 title : The title of the plot. See set_title . height : The height of the plot. width : The width of the plot. dpi : The resolution of the plot. plot3d : Whether the plot is a 3D plot or not. border : Whether to draw a thin black border around the frame of the plot. Example \u00b6 plot = pl . Plot ( 'Title' ) 3D Plots \u00b6 plotify.plot.Plot3D ( BasePlot ) \u00b6 __init__ ( self , * args , ** kwargs ) \u00b6 Description \u00b6 Creates a Plot object. Arguments \u00b6 title : The title of the plot. See set_title . height : The height of the plot. width : The width of the plot. dpi : The resolution of the plot. plot3d : Whether the plot is a 3D plot or not. border : Whether to draw a thin black border around the frame of the plot. Example \u00b6 plot = pl . Plot ( 'Title' ) projection ( self , x , y , z = None , alpha = 0.1 , linewidth = 0 , * args , ** kwargs ) \u00b6 set_camera ( self , elev = None , azim = None ) \u00b6 Both parameters are angles in [0, 360]. set_notation ( self , x = None , y = None , z = None ) \u00b6 surface ( self , x , y , z = None , alpha = 0.25 , linewidth = 0 , * args , ** kwargs ) \u00b6 wireframe ( self , x , y , z = None , * args , ** kwargs ) \u00b6 Animations \u00b6 plotify.plot.Animation \u00b6 __init__ ( self , fps = 24 ) \u00b6 Initialize self. See help(type(self)) for accurate signature. add_frame ( self , image ) \u00b6 image should be a (height, width, 3) np.ndarry reset ( self ) \u00b6 rotate_3d ( self , plot , duration = 8 ) \u00b6 save ( self , path ) \u00b6 Containers \u00b6 plotify.plot.Container ( BasePlot ) \u00b6 __init__ ( self , rows = 1 , cols = 2 , height = None , width = None , * args , ** kwargs ) \u00b6 Description \u00b6 Creates a Plot object. Arguments \u00b6 title : The title of the plot. See set_title . height : The height of the plot. width : The width of the plot. dpi : The resolution of the plot. plot3d : Whether the plot is a 3D plot or not. border : Whether to draw a thin black border around the frame of the plot. Example \u00b6 plot = pl . Plot ( 'Title' ) get_plot ( self , row , col ) \u00b6 set_plot ( self , row , col , plot ) \u00b6 plotify.custom_plots.ListContainer ( Container ) \u00b6 __init__ ( self , list_plots , * args , ** kwargs ) \u00b6 Description \u00b6 Creates a Plot object. Arguments \u00b6 title : The title of the plot. See set_title . height : The height of the plot. width : The width of the plot. dpi : The resolution of the plot. plot3d : Whether the plot is a 3D plot or not. border : Whether to draw a thin black border around the frame of the plot. Example \u00b6 plot = pl . Plot ( 'Title' )","title":"Plot Subclasses"},{"location":"api/more_plots/#plot-subclasses","text":"The following are subclasses from BasePlot and follow the same API (they just have different default).","title":"Plot Subclasses"},{"location":"api/more_plots/#predefined-2d-plots","text":"","title":"Predefined 2D Plots"},{"location":"api/more_plots/#plotify.custom_plots.Plot","text":"","title":"Plot"},{"location":"api/more_plots/#plotify.custom_plots.Plot.__init__","text":"","title":"__init__()"},{"location":"api/more_plots/#plotify.custom_plots.PublicationPlot","text":"","title":"PublicationPlot"},{"location":"api/more_plots/#plotify.custom_plots.PublicationPlot.__init__","text":"","title":"__init__()"},{"location":"api/more_plots/#plotify.custom_plots.LowResPlot","text":"","title":"LowResPlot"},{"location":"api/more_plots/#plotify.custom_plots.LowResPlot.__init__","text":"","title":"__init__()"},{"location":"api/more_plots/#plotify.custom_plots.ModernPlot","text":"","title":"ModernPlot"},{"location":"api/more_plots/#plotify.custom_plots.ModernPlot.__init__","text":"","title":"__init__()"},{"location":"api/more_plots/#plotify.plot.Image","text":"","title":"Image"},{"location":"api/more_plots/#plotify.plot.Image.__init__","text":"","title":"__init__()"},{"location":"api/more_plots/#plotify.plot.Drawing","text":"","title":"Drawing"},{"location":"api/more_plots/#plotify.plot.Drawing.__init__","text":"","title":"__init__()"},{"location":"api/more_plots/#3d-plots","text":"","title":"3D Plots"},{"location":"api/more_plots/#plotify.plot.Plot3D","text":"","title":"Plot3D"},{"location":"api/more_plots/#plotify.plot.Plot3D.__init__","text":"","title":"__init__()"},{"location":"api/more_plots/#plotify.plot.Plot3D.projection","text":"","title":"projection()"},{"location":"api/more_plots/#plotify.plot.Plot3D.set_camera","text":"Both parameters are angles in [0, 360].","title":"set_camera()"},{"location":"api/more_plots/#plotify.plot.Plot3D.set_notation","text":"","title":"set_notation()"},{"location":"api/more_plots/#plotify.plot.Plot3D.surface","text":"","title":"surface()"},{"location":"api/more_plots/#plotify.plot.Plot3D.wireframe","text":"","title":"wireframe()"},{"location":"api/more_plots/#animations","text":"","title":"Animations"},{"location":"api/more_plots/#plotify.plot.Animation","text":"","title":"Animation"},{"location":"api/more_plots/#plotify.plot.Animation.__init__","text":"Initialize self. See help(type(self)) for accurate signature.","title":"__init__()"},{"location":"api/more_plots/#plotify.plot.Animation.add_frame","text":"image should be a (height, width, 3) np.ndarry","title":"add_frame()"},{"location":"api/more_plots/#plotify.plot.Animation.reset","text":"","title":"reset()"},{"location":"api/more_plots/#plotify.plot.Animation.rotate_3d","text":"","title":"rotate_3d()"},{"location":"api/more_plots/#plotify.plot.Animation.save","text":"","title":"save()"},{"location":"api/more_plots/#containers","text":"","title":"Containers"},{"location":"api/more_plots/#plotify.plot.Container","text":"","title":"Container"},{"location":"api/more_plots/#plotify.plot.Container.__init__","text":"","title":"__init__()"},{"location":"api/more_plots/#plotify.plot.Container.get_plot","text":"","title":"get_plot()"},{"location":"api/more_plots/#plotify.plot.Container.set_plot","text":"","title":"set_plot()"},{"location":"api/more_plots/#plotify.custom_plots.ListContainer","text":"","title":"ListContainer"},{"location":"api/more_plots/#plotify.custom_plots.ListContainer.__init__","text":"","title":"__init__()"},{"location":"api/plots/","text":"Plot \u00b6 The API for creating Plot objects. Note The examples assume plotify is imported as follows: import plotify as pl plotify.BasePlot \u00b6 __init__ ( self , title = '' , height = 3900.0 , width = 7200.0 , dpi = 600.0 , plot3d = False , border = True ) \u00b6 Description \u00b6 Creates a Plot object. Arguments \u00b6 title : The title of the plot. See set_title . height : The height of the plot. width : The width of the plot. dpi : The resolution of the plot. plot3d : Whether the plot is a 3D plot or not. border : Whether to draw a thin black border around the frame of the plot. Example \u00b6 plot = pl . Plot ( 'Title' ) annotate ( self , text , xytext , xylabel , rad = 0.0 , shape = '->' , width = 0.5 , color = '#000000' , * args , ** kwargs ) \u00b6 arrow ( self , start , end , width = 1.0 , fill = None , color = None , linewidth = 1.0 , * args , ** kwargs ) \u00b6 Start and end are (z, y) tuples. bar ( self , x , y , show_values = False , num_box_sets = None , spacing = 1.0 , center_ticks = False , * args , ** kwargs ) \u00b6 box ( self , x , y , show_values = False , num_box_sets = None , spacing = 2.0 , center_ticks = False , * args , ** kwargs ) \u00b6 circle ( self , x , y , radius , fill = None , color = None , alpha = 0.5 , linewidth = 1.5 , * args , ** kwargs ) \u00b6 close ( self ) \u00b6 contour ( self , x , y , z = None , fill = True , * args , ** kwargs ) \u00b6 Description \u00b6 Draws the contours of a 3D function. Arguments \u00b6 x : x-coordinates of the points where z is evaluated. y : y-coordinates of the points where z is evaluated. z : function or 2D-array of values where a function was evaluated given x and y values. fill : whether to fill the contour plot. *args : positional arguments passed to Matplotlib's contour / contourf function. **kwargs : keyword arguments passed to Matplotlib's contour / contourf function. Example \u00b6 x = y = np . linspace ( - 10 , 10 , num = 100 ) f = lambda x , y : 0.5 * x ** 3 + 10.0 * y ** 2 plot = pl . Plot ( 'Title' ) plot . contour ( x , y , f , fill = True ) errorbar ( self , x , y , errors = None , vertical = True , * args , ** kwargs ) \u00b6 Description \u00b6 Like plot , but also adds error bars on the points. The size of the error bars is given by errors (a list). Arguments \u00b6 x : x-coordinates of the points to plot. y : y-coordinates of the points to plot. errors : list of error sizes of length len(x) . vertical : whether error bars are drawn vertically or horizontally. *args : positional arguments passed to Matplotlib's errorbar function. **kwargs : keyword arguments passed to Matplotlib's errorbar function. Example \u00b6 x = np . arange ( 10 ) plot = pl . Plot ( 'Title' ) plot . errorbar ( x = x , y = x ** 2 , errors = x , label = r '$f(x) = x^2$' ) fancybox ( self , x , y , width , height , style = 'round' , fill = None , color = None , alpha = 0.5 , linewidth = 1.5 , * args , ** kwargs ) \u00b6 heatmap ( self , heatvalues , xlabels = None , ylabels = None , show_values = False , cbar_title = '' , * args , ** kwargs ) \u00b6 Description \u00b6 Draws a heatmap given an array of heat values. Arguments \u00b6 heatvalues : 2D grid to plot. (list of list or np.array) xlabels : list of names. ylabels : list of names. show_values : bool of whether to write values inside heat box. cbar_title : title of the color bar. *args : positional arguments passed to Matplotlib's imshow function. **kwargs : keyword arguments passed to Matplotlib's imshow function. Keyword arguments of interest: interpolation : nearest / kaiser / hanning / gaussian / spline16 Example \u00b6 values = np . arange ( 100 ) . reshape ( 10 , 10 ) plot = pl . Plot ( height = 3900.0 , width = 7200.0 ) plot . heatmap ( heatvalues = values , xlabels = [ str ( x ) for x in range ( 10 )], ylabels = [ str ( 10 - x ) for x in range ( 10 )], show_values = True , cbar_title = 'My Color Bar' , ) numpy ( self ) \u00b6 plot ( self , x , y = None , jitter = 0.0 , smooth_window = 0 , smooth_std = True , * args , ** kwargs ) \u00b6 Description \u00b6 Plots a line defined by points in x (and y ). Arguments \u00b6 x : x-coordinates. y : y-coordinates, if None then x is used as y and x is range(0, len(x)) . jitter : Pointwise or float value for shading around curve. *args : positional arguments passed to Matplotlib's plot function. **kwargs : keyword arguments passed to Matplotlib's plot function. Example \u00b6 x = np . arange ( 10 ) plot = pl . Plot ( 'Title' ) plot . plot ( x = x , y = x ** 2 , jitter = 5.0 , label = r '$f(x) = x^2$' , linestyle = 'dashed' ) rectangle ( self , x , y , width , height , fill = None , color = None , alpha = 0.5 , linewidth = 1.5 , * args , ** kwargs ) \u00b6 save ( self , path , bbox_inches = 'tight' , ** kwargs ) \u00b6 scatter ( self , * args , ** kwargs ) \u00b6 Description \u00b6 Scatter points defined by x (and y ). Arguments \u00b6 *args : positional arguments passed to Matplotlib's plot function. **kwargs : keyword arguments passed to Matplotlib's plot function. Example \u00b6 x = np . arange ( 10 ) plot = pl . Plot ( 'Title' ) plot . scatter ( x , x ** 2 , label = r '$f(x) = x^2$' ) set_axis ( self , x = '' , y = '' ) \u00b6 set_colormap ( self , cm ) \u00b6 set_dimensions ( self , height = None , width = None ) \u00b6 set_dpi ( self , dpi ) \u00b6 set_font ( self , name ) \u00b6 set_grid ( self , axis = 'full' , granularity = 'fine' ) \u00b6 Sets a fine, light gray background grid. axis values: full, vertical, horizontal, none. granularity: coarse, fine set_legend ( self , loc = 'best' , title = None , show = True , inset = True , ncol = 1 , alpha = 0.8 , round_corners = False , ** kwargs ) \u00b6 set_lims ( self , x = None , y = None , z = None ) \u00b6 Expects (min_val, max_val) tuples for each arguments, where vals can be none to re-use current ones. set_notation ( self , x = None , y = None ) \u00b6 set_palette ( self , palette , num_colors = 8 ) \u00b6 set_scales ( self , x = None , y = None , z = None ) \u00b6 Possible values: 'linear', 'log', 'log2', 'symlog', 'symlog2', 'logit' set_subtitle ( self , * args , ** kwargs ) \u00b6 set_title ( self , title , loc = 'center' , x = None , y = 0.98 , text_obj = None , ** kwargs ) \u00b6 Description \u00b6 Sets the title of the plot. Arguments \u00b6 title : Text of the title. loc : Location of the title. x : x-coordinate of the title. y : y-coordinate of the title. font : Optional font name string. text_obj : A text object where the title is set. Example \u00b6 plot = pl . Plot ( 'Title' ) plot . set_title ( 'New and Much Longer Title' , loc = 'right' , x = 0.9 , y = 0.92 ) set_xticks ( self , positions , labels = None ) \u00b6 set_yticks ( self , positions , labels = None ) \u00b6 show ( self ) \u00b6 stretch ( self , left = 0.0 , right = 0.0 , top = 0.0 , bottom = 0.0 ) \u00b6 text ( self , text , xytext , * args , ** kwargs ) \u00b6 update_rcparams ( self , updates ) \u00b6 usetex ( self , * args , ** kwargs ) \u00b6","title":"Plot API"},{"location":"api/plots/#plot","text":"The API for creating Plot objects. Note The examples assume plotify is imported as follows: import plotify as pl","title":"Plot"},{"location":"api/plots/#plotify.BasePlot","text":"","title":"BasePlot"},{"location":"api/plots/#plotify.BasePlot.__init__","text":"","title":"__init__()"},{"location":"api/plots/#plotify.BasePlot.annotate","text":"","title":"annotate()"},{"location":"api/plots/#plotify.BasePlot.arrow","text":"Start and end are (z, y) tuples.","title":"arrow()"},{"location":"api/plots/#plotify.BasePlot.bar","text":"","title":"bar()"},{"location":"api/plots/#plotify.BasePlot.box","text":"","title":"box()"},{"location":"api/plots/#plotify.BasePlot.circle","text":"","title":"circle()"},{"location":"api/plots/#plotify.BasePlot.close","text":"","title":"close()"},{"location":"api/plots/#plotify.BasePlot.contour","text":"","title":"contour()"},{"location":"api/plots/#plotify.BasePlot.errorbar","text":"","title":"errorbar()"},{"location":"api/plots/#plotify.BasePlot.fancybox","text":"","title":"fancybox()"},{"location":"api/plots/#plotify.BasePlot.heatmap","text":"","title":"heatmap()"},{"location":"api/plots/#plotify.BasePlot.numpy","text":"","title":"numpy()"},{"location":"api/plots/#plotify.BasePlot.plot","text":"","title":"plot()"},{"location":"api/plots/#plotify.BasePlot.rectangle","text":"","title":"rectangle()"},{"location":"api/plots/#plotify.BasePlot.save","text":"","title":"save()"},{"location":"api/plots/#plotify.BasePlot.scatter","text":"","title":"scatter()"},{"location":"api/plots/#plotify.BasePlot.set_axis","text":"","title":"set_axis()"},{"location":"api/plots/#plotify.BasePlot.set_colormap","text":"","title":"set_colormap()"},{"location":"api/plots/#plotify.BasePlot.set_dimensions","text":"","title":"set_dimensions()"},{"location":"api/plots/#plotify.BasePlot.set_dpi","text":"","title":"set_dpi()"},{"location":"api/plots/#plotify.BasePlot.set_font","text":"","title":"set_font()"},{"location":"api/plots/#plotify.BasePlot.set_grid","text":"Sets a fine, light gray background grid. axis values: full, vertical, horizontal, none. granularity: coarse, fine","title":"set_grid()"},{"location":"api/plots/#plotify.BasePlot.set_legend","text":"","title":"set_legend()"},{"location":"api/plots/#plotify.BasePlot.set_lims","text":"Expects (min_val, max_val) tuples for each arguments, where vals can be none to re-use current ones.","title":"set_lims()"},{"location":"api/plots/#plotify.BasePlot.set_notation","text":"","title":"set_notation()"},{"location":"api/plots/#plotify.BasePlot.set_palette","text":"","title":"set_palette()"},{"location":"api/plots/#plotify.BasePlot.set_scales","text":"Possible values: 'linear', 'log', 'log2', 'symlog', 'symlog2', 'logit'","title":"set_scales()"},{"location":"api/plots/#plotify.BasePlot.set_subtitle","text":"","title":"set_subtitle()"},{"location":"api/plots/#plotify.BasePlot.set_title","text":"","title":"set_title()"},{"location":"api/plots/#plotify.BasePlot.set_xticks","text":"","title":"set_xticks()"},{"location":"api/plots/#plotify.BasePlot.set_yticks","text":"","title":"set_yticks()"},{"location":"api/plots/#plotify.BasePlot.show","text":"","title":"show()"},{"location":"api/plots/#plotify.BasePlot.stretch","text":"","title":"stretch()"},{"location":"api/plots/#plotify.BasePlot.text","text":"","title":"text()"},{"location":"api/plots/#plotify.BasePlot.update_rcparams","text":"","title":"update_rcparams()"},{"location":"api/plots/#plotify.BasePlot.usetex","text":"","title":"usetex()"},{"location":"api/smoothing/","text":"Smoothing \u00b6 plotify . smoothing . smooth ( x , y = None , temperature = 1.0 ) \u00b6 Decription \u00b6 Simple wrapper around exponential smoothing. Returns 1 value (smoothed x ) if y is None. Returns 2 values (smoothed x and y ) if y is not None. Example \u00b6 x = np . arange ( 100 ) y = np . logspace ( - 50 , 50 ) # single value smooth_x = plotify . smoothing . smooth ( x , temperature = 20.0 ) # double value smooth_x , smooth_y = plotify . smoothing . smooth ( x , y ) plotify . smoothing . exponential_smoothing ( x , y = None , temperature = 1.0 ) \u00b6 Decription \u00b6 Two-sided exponential moving average for smoothing a curve. It performs regular exponential moving average twice from two different sides and then combines the results together. Arguments \u00b6 x (ndarray/tensor/list) - x values, in accending order. y (ndarray/tensor/list) - y values. temperature (float, optional , default=1.0) - The higher, the smoother. Return \u00b6 ndarray - x values after resampling. ndarray - y values after smoothing. Credit \u00b6 Adapted from OpenAI's baselines implementation. Example \u00b6 from plotify.smoothing import exponential_smoothing x_smoothed , y_smoothed , _ = exponential_smoothing ( x_original , y_original , temperature = 3. , )","title":"Smoothing"},{"location":"api/smoothing/#smoothing","text":"","title":"Smoothing"},{"location":"api/smoothing/#plotify.smoothing.smooth","text":"","title":"smooth()"},{"location":"api/smoothing/#plotify.smoothing.exponential_smoothing","text":"","title":"exponential_smoothing()"},{"location":"api/tensorboard/","text":"TensorBoard \u00b6 plotify.tensorboard_plots.TensorboardAPI \u00b6 Description \u00b6 Helper class to fetch values from a running TensorBoard server. __init__ ( self , address = None , run = None , tag = None ) \u00b6 Initialize self. See help(type(self)) for accurate signature. fetch_scalars ( self , address = None , run = None , tag = None , return_steps = True ) \u00b6","title":"TensorBoard"},{"location":"api/tensorboard/#tensorboard","text":"","title":"TensorBoard"},{"location":"api/tensorboard/#plotify.tensorboard_plots.TensorboardAPI","text":"","title":"TensorboardAPI"},{"location":"api/tensorboard/#plotify.tensorboard_plots.TensorboardAPI.__init__","text":"Initialize self. See help(type(self)) for accurate signature.","title":"__init__()"},{"location":"api/tensorboard/#plotify.tensorboard_plots.TensorboardAPI.fetch_scalars","text":"","title":"fetch_scalars()"},{"location":"api/utils/","text":"Utilities \u00b6 plotify . usetex ( use = True , silent = False , force = False ) \u00b6 Description \u00b6 Enables rendering fonts with LaTeX. Arguments \u00b6 use : Disables Latex rendering if False. silent : Prints error message if True. force : Uses external LaTeX software (eg, texlive, mactex) if True; else, uses matplotlib's implementation.","title":"Utilities"},{"location":"api/utils/#utilities","text":"","title":"Utilities"},{"location":"api/utils/#plotify.usetex","text":"","title":"usetex()"},{"location":"api/wandb/","text":"WandB \u00b6 plotify . wandb_plots . fetch_smooth_curves ( x_key , y_key , wandb_ids , samples = 2048 , max_x = None , smooth_temperature = 0.0 ) \u00b6 plotify . wandb_plots . average_align_curves ( x_curves , y_curves , samples = 2048 , x_scale = 'linear' ) \u00b6 plotify . wandb_plots . wandb_plot ( config ) \u00b6 Generates a new plot from a configuration dictionary. Example configuration: config = { 'type' : pl . PublicationPlot , 'title' : 'PT Tasks' , 'subtitle' : 'mini-ImageNet' , 'xtitle' : 'Iterations' , 'ytitle' : 'Accuracy' , 'xlims' : ( 0 , 1000 ), 'ylims' : ( 0.0 , 1.0 ), 'legend' : { 'inset' : True , 'loc' : 'best' , 'show' : True , }, 'results' : [ # Each dict is a curve { 'wandb_id' : [ 'arnolds/qmcrl/51podsf0' , 'arnolds/qmcrl/xpouxt8w' , ], 'x_key' : 'iteration' , 'y_key' : 'test/episode_returns' , 'label' : 'MC' , 'color' : pl . Maureen [ 'blue' ], 'linewidth' : 1.8 , 'smooth_window' : 1 , 'markevery' : 1000 , 'samples' : 4196 , 'shade' : 'std' , }, { 'wandb_id' : 'arnolds/meta-features/11r23eby' , 'x_key' : 'iteration' , 'y_key' : 'valid/accuracy' , 'label' : 'No Varnish' , 'color' : pl . Maureen [ 'orange' ], 'temperature' : 50.0 , 'markevery' : 100 , }, ], }","title":"WandB"},{"location":"api/wandb/#wandb","text":"","title":"WandB"},{"location":"api/wandb/#plotify.wandb_plots.fetch_smooth_curves","text":"","title":"fetch_smooth_curves()"},{"location":"api/wandb/#plotify.wandb_plots.average_align_curves","text":"","title":"average_align_curves()"},{"location":"api/wandb/#plotify.wandb_plots.wandb_plot","text":"Generates a new plot from a configuration dictionary. Example configuration: config = { 'type' : pl . PublicationPlot , 'title' : 'PT Tasks' , 'subtitle' : 'mini-ImageNet' , 'xtitle' : 'Iterations' , 'ytitle' : 'Accuracy' , 'xlims' : ( 0 , 1000 ), 'ylims' : ( 0.0 , 1.0 ), 'legend' : { 'inset' : True , 'loc' : 'best' , 'show' : True , }, 'results' : [ # Each dict is a curve { 'wandb_id' : [ 'arnolds/qmcrl/51podsf0' , 'arnolds/qmcrl/xpouxt8w' , ], 'x_key' : 'iteration' , 'y_key' : 'test/episode_returns' , 'label' : 'MC' , 'color' : pl . Maureen [ 'blue' ], 'linewidth' : 1.8 , 'smooth_window' : 1 , 'markevery' : 1000 , 'samples' : 4196 , 'shade' : 'std' , }, { 'wandb_id' : 'arnolds/meta-features/11r23eby' , 'x_key' : 'iteration' , 'y_key' : 'valid/accuracy' , 'label' : 'No Varnish' , 'color' : pl . Maureen [ 'orange' ], 'temperature' : 50.0 , 'markevery' : 100 , }, ], }","title":"wandb_plot()"}]}